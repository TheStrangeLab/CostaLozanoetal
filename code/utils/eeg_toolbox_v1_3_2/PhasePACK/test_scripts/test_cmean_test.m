function test_cmean_test()
%
% Uses Examples 5.8 and 5.9 from Fisher (1993) to test the
% cmean_test.m function.
%
% Calculated values differ about 1-2% from those published in Fisher
% (1993), but I am confident in the accuracy of their calculation.


% Data from Appendix B.13
set1 = [
161 182 179 193 164 166 144 175 163 187  ...
177 161 170 169 144 179 175 185 211 176 ...
184 149 166 173 144 174 202 170 164 160 ...
163 218 181 161 180 218 18 202 152 140 ...
244 187 203 187 180 230 190 200 194 181 ...
192 168 164 171 179 166 174 164 166 257 ...
215 208 187 212 177 186 171 196 188 188 ...
163 201 204 184 218 220 178 316 161 182 ...
180 200 211 228 168 197 202 273 158 150 ...
157 182 189 174 136 202 202 167 181 193 ...
       ]'/180*pi;

set2 = [
121 138 183 193 180 151 179 170 178 144  ...
186 164 181 202 182 162 190 178 168 164 ...
160 166 166 192 150 173 156 173 184 159 ...
165 147 189 200 143 156 185 188 173 165 ...
189 165 179 176 172 182 178 162 186 161 ...
       ]'/180*pi;

set3 = [
194 188 166 185 191 184 175 176 173 164 ...
204 185 191 171 170 168 195 157 156 174 ...
170 159 169 173 147 157 182 178 165 170 ...
180 170 164 195 185 166 177 179 169 184 ...
187 149 193 162 160 183 139 170 202 181 ...
       ]'/180*pi;

set4 = [
178 154 179 181 208 163 177 167 158 184 ...
158 152 202 166 154 160 161 179 149 187 ...
200 157 177 158 166 171 164 159 150 155 ...
184 163 152 196 186 194 168 183 171 165 ...
178 175 172 166 173 179 171 176 186 167 ...
       ]'/180*pi;

set5 = [
172 186 162 189 168 166 184 154 131 176 ...
186 174 136 172 195 182 165 177 176 186 ...
174 174 164 156 171 147 169 165 166 181 ...
161 190 188 168 154 213 203 167 172 189 ...
183 162 174 171 174 189 186 148 169 176 ...
       ]'/180*pi;

set6 = [
183 171 167 178 172 191 173 160 165 155 ...
194 179 194 181 166 180 209 181 181 175 ...
170 191 194 184 164 174 170 177 186 197 ...
177 179 168 161 171 157 189 190 159 176 ...
201 177 184 169 172 174 180 180 184 181 ...
       ]'/180*pi;

set7 = [
172 170 141 170 163 172 182 154 198 186 ...
174 169 190 172 187 184 179 173 202 202 ...
171 171 188 165 195 170 187 200 195 193 ...
165 159 152 190 186 158 127 180 108 194 ...
167 170 182 173 178 172 175 169 185 191 ...
176 165 177 166 179 165 183 183 160 158 ...
189 158 128 171 176 178
       ]'/180*pi;

set8 = [
166 188 192 177 114 169 251 154 198 189 ...
178 177 189 155 165 161 175 173 182 179 ...
178 180 190 175 161 179 156 184 187 192 ...
168 152 173 188 175 152 166 177 161 182 ...
179 161 187 199 140 132 178 189 ...
    ]'/180*pi;

set9 = [
184.5 176.5 187.5 183.5 189.5 144.5 195.5 191.5 157.5 180.5 ...
173.5 174.5 173.5 191.5 152.5 187.5 154.5 165.5 159.5 186.5 ...
198.5 161.5 137.5 175.5 195.5 144.5 164.5 162.5 199.5 184.5 ...
172.5 194.5 208.5 216.5 200.5 187.5 177.5 134.5 170.5 194.5 ...
172.5 195.5 164.5 216.5 175.5 201.5 161.5 154.5 183.5 204.5 ...
174.5 166.5 151.5 156.5 165.5 187.5 170.5 169.5 148.5 167.5 ...
146.5 157.5 192.5 154.5 151.5 163.5 150.5 160.5 184.5 185.5 ...
179.5 176.5 183.5 159.5 165.5 164.5 169.5 174.5 173.5 188.5 ...
187.5 166.5 170.5 157.5 165.5 168.5 159.5 160.5 182.5 148.5 ...
168.5 173.5 182.5 165.5 157.5 170.5 175.5 160.5 177.5 177.5 ...
       ]'/180*pi;

set10 = [
169 176 168 171 146 181 176 186 171 164 ...
167 160 163 164 175 186 182 182 171 201 ...
184 179 172 167 173 153 161 178 170 175 ...
180 173 172 165 171 161 171 173 162 178 ...
172 183 166 170 176 172 171 174 188 176 ...
        ]'/180*pi;
    
set11 = [
195.5 180.5 181.5 185.5 177.5 175.5 178.5 178.5 176.5 179.5 ...
184.5 176.5 189.5 168.5 187.5 190.5 184.5 176.5 186.5 193.5 ...
182.5 216.5 190.5 207.5 181.5 191.5 182.5 185.5 166.5 176.5 ...
173.5 176.5 194.5 199.5 182.5 188.5 180.5 ...
        ]'/180*pi;

set12 = [
170 167 189 227 141 178 183 180 175 160 ...
173 168 178 179 123 191 184 180 175 188 ...
177 189 179 179 188 183 178 176 184 155 ...
165 ...
        ]'/180*pi;

set13 = [
195.5 196.5 180.5 181.5 179.5 186.5 164.5 164.5 172.5 177.5 ...
179.5 164.5 181.5 162.5 182.5 181.5 197.5 181.5 166.5 176.5 ...
173.5 178.5 174.5 190.5 187.5 175.5 160.5 201.5 202.5 184.5 ...
187.5 179.5 195.5 186.5 162.5 181.5 180.5 180.5 188.5 176.5 ...
190.5 176.5 187.5 174.5 182.5 161.5 185.5 177.5 190.5 168.5 ...
179.5 178.5 182.5 174.5 180.5 169.5 187.5 180.5 186.5 170.5 ...
186.5 182.5 204.5 199.5 194.5 198.5 180.5 172.5 187.5 206.5 ...
195.5 238.5 176.5 186.5 210.5 156.5 192.5 171.5 172.5 185.5 ...
162.5 184.5 172.5 199.5 185.5 177.5 181.5 191.5 174.5 182.5 ...
178.5 198.5 178.5 184.5 189.5 177.5 185.5 171.5 178.5 195.5 ...
166.5 164.5 197.5 187.5 179.5 178.5 183.5 150.5 181.5 177.5 ...
168.5 176.5 176.5 177.5 181.5 182.5 184.5 188.5 181.5 180.5 ...
162.5 198.5 196.5 172.5 180.5 185.5 196.5 178.5 178.5 179.5 ...
173.5 190.5
        ]'/180*pi;

set14 = [
180.5 195.5 191.5 189.5 162.5 181.5 204.5 190.5 182.5 174.5 ...
174.5 186.5 164.5 165.5 190.5 194.5 191.5 159.5 177.5 164.5 ...
173.5 167.5 175.5 186.5 180.5 192.5 175.5 186.5 200.5 187.5 ...
179.5 171.5 178.5 174.5 155.5 165.5 151.5 183.5 164.5 155.5 ...
173.5 168.5 172.5 181.5 174.5 187.5 172.5 178.5 198.5 175.5 ...
191.5 177.5 183.5 185.5 183.5 175.5 178.5 162.5 177.5 182.5 ...
197.5 204.5 154.5 185.5 175.5 168.5 175.5 166.5 215.5 185.5 ...
179.5 174.5 200.5 194.5 132.5 185.5 199.5 172.5 178.5 178.5 ...
178.5 189.5 176.5 173.5 182.5 184.5 172.5 199.5 177.5 174.5 ...
176.5 181.5 ...
        ]'/180*pi;

% convert data from axial to vector
set1 =  mod(2*set1, 2*pi);
set2 =  mod(2*set2, 2*pi);
set3 =  mod(2*set3, 2*pi);
set4 =  mod(2*set4, 2*pi);
set5 =  mod(2*set5, 2*pi);
set6 =  mod(2*set6, 2*pi);
set7 =  mod(2*set7, 2*pi);
set8 =  mod(2*set8, 2*pi);
set9 =  mod(2*set9, 2*pi);
set10 =  mod(2*set10, 2*pi);
set11 =  mod(2*set11, 2*pi);
set12 =  mod(2*set12, 2*pi);
set13 =  mod(2*set13, 2*pi);
set14 =  mod(2*set14, 2*pi);

[p, Yr, R] = cmean_test(set1, set2, set3, set4, set5, set6, set7, ...
                        set8, set9, set10, set11, set12, set13, set14);


fprintf('Yr=%.1f, expected Yr=91.6\n', Yr);
fprintf('Rm=%.2f, expected Rm=4275.16\n\n', R);


% Data from Appendix B.15
data1 = [28 354 332 59 25 43 36 51 50 48 330 23 32 325 ]' / 180 * pi;

data2 = [ 198 196 196 170 162 164 166 203 147 183 180 180 221 200 ...
          218 222 161 153 170 143 212 224 ]' / 180 * pi;

% transform axial data into vectors
data1 = mod(2*data1, 2*pi);
data2 = mod(2*data2, 2*pi);

[theta, rbar, delta1] = circmean( data1 );
[theta, rbar, delta2] = circmean( data2 );

[p, Yr, R] = cmean_test(data1, data2);
fprintf('Yr = %.4f, expected = 0.0889\n', Yr);
